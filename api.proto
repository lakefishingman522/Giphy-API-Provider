syntax = "proto3";
package api;

//////////////////////////////////////////////////////////////////////////////////////////////////
/// Components ///////////////////////////////////////////////////////////////////////////////////

// A type representing an error which has taken place in some domain specific manner.
message ErrorDomain {
  // A description of the error.
  string description = 1;
  // Error information specific to fields of the domain request.
  map<string,string> fields = 2;
}

// The possible variants of an error response.
enum ErrorResponseType {
  // An internal server error.
  ETYPE_ISE = 0;

  // An error indicating the that user has failed authentication.
  //
  // Typically this means that the user's JWT is expired.
  ETYPE_AUTHN = 1;

  // An error indicating that the received payload was invalid.
  //
  // Typically this means that the frame couldn't even be decoded. Errors specific to business
  // logic requests MUST NOT appear here.
  ETYPE_INVALID = 2;
}

// A GIF from the Giphy API.
message GiphyGif {
  string id = 1;
  string title = 2;
  string url = 3;
  bool is_favorite = 4;
}

// A GIF which has been favorited by a user.
message FavoriteGif {
  string id = 1;
  GiphyGif gif = 2;
  string category = 3;
}

//////////////////////////////////////////////////////////////////////////////////////////////////
/// Request & Response Variants //////////////////////////////////////////////////////////////////
///
/// Message types here come in pairs. If a Request is sent with a particular request variant, its
/// corresponding Response variant will be returned. This invariant is part of the API's contract.

// A response which represents an error outside of the corresponding request's domain.
//
// This typically will be returned as part of an authentication failure, or an ISE.
message ErrorResponse {
  // A user friendly message describing the error.
  string description = 1;

  // The type of error which this represents.
  ErrorResponseType etype = 2;
}

// A request to register a new account.
message RegisterRequest {
  string email = 1;
  string password = 2;
}

// The response to a register request.
message RegisterResponse {
  ErrorDomain error = 1;
  // The user's ID.
  string id = 2;
  string email = 3;
  string jwt = 4;
}

// A login request.
message LoginRequest {
  string email = 1;
  string password = 2;
}

// The response to a login request.
message LoginResponse {
  ErrorDomain error = 1;
  // The user's ID.
  string id = 2;
  string email = 3;
  string jwt = 4;
}

// A request to search the Giphy API.
message SearchGiphyRequest {
  string jwt = 1;
  string query = 2;
}

// The response to a Giphy search request.
message SearchGiphyResponse {
  ErrorDomain error = 1;
  repeated GiphyGif gifs = 2;
}

//////////////////////////////////////////////////////////////////////////////////////////////////
/// Root Frame ///////////////////////////////////////////////////////////////////////////////////
///
/// The contract of this API is that any message sent to this API must be a RequestFrame.
/// Similarly, the API will only ever send ResponseFrames over a connected websocket.

// A data frame which represents an API request.
message RequestFrame {
  // The ID of this request.
  //
  // Clients must ensure that this ID is unique, as it is the primary mechanism used for matching
  // request frames with response frames over a websocket.
  string id = 1;
  oneof request {
    RegisterRequest register = 10;
    LoginRequest login = 11;
    SearchGiphyRequest search_giphy = 12;
  }
}

// A data frame which represents an API response.
message ResponseFrame {
  // The ID of the original request which produced this frame.
  string id = 1;
  oneof response {
    ErrorResponse error = 10;
    RegisterResponse register = 11;
    LoginResponse login = 12;
    SearchGiphyResponse search_giphy = 13;
  }
}
